name: Release
on:
  push:
    tags:
      - "*"
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
      - name: Verify version
        run: |
          echo "Version from env: $JRELEASER_PROJECT_VERSION"
          if [[ -z "$JRELEASER_PROJECT_VERSION" ]]; then
          echo "‚ùå JRELEASER_PROJECT_VERSION is not set!"
          exit 1
          fi
        env:
          JRELEASER_PROJECT_VERSION: ${{ github.ref_name }}
      - name: Build JARs
        run: ./gradlew clean build publish mergeStagingDeploys
        env:
          JRELEASER_PROJECT_VERSION: ${{ github.ref_name }}
      - name: Inspect staging-deploy folders
        run: |
          echo "üîç core/build/staging-deploy"
          ls -R core/build/staging-deploy || echo "‚ùå core staging-deploy missing"
          echo "üîç api/build/staging-deploy"
          ls -R api/build/staging-deploy || echo "‚ùå api staging-deploy missing"
          echo "üîç root build/staging-deploy (merged)"
          ls -R build/staging-deploy || echo "‚ùå merged staging-deploy missing"
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      - name: Release with JReleaser
        uses: jreleaser/release-action@v2
        with:
          arguments: full-release
        env:
          JRELEASER_PROJECT_VERSION: ${{ github.ref_name }}
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          JRELEASER_MAVENCENTRAL_SONATYPE_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          JRELEASER_MAVENCENTRAL_SONATYPE_TOKEN: ${{ secrets.OSSRH_TOKEN }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
